---
- name: Create keys and certificates
  hosts: localhost
  become: no
  vars:
    python_version: 3.6
  tasks:
    - name: install libselinux-python3
      become: yes
      shell:
        cmd: "yum install libselinux-python3"

    - name: copy needed files for using selinux in python3 from OS libraries1
      copy:
        src: /usr/lib64/python{{python_version}}/site-packages/selinux
        dest: $VIRTUAL_ENV/lib64/python{{python_version}}/site-packages

    - name: copy needed files for using selinux in python3 from OS libraries2
      copy:
        src: /usr/lib64/python{{python_version}}/site-packages/selinux/_selinux.so
        dest: $VIRTUAL_ENV/lib64/python{{python_version}}/site-packages/

    - name: Make sure that etc/certs exists 
      file: 
        state: directory
        path: "{{playbook_dir}}/etc/certs"

    - name: Generate an OpenSSL private key with a different size (2048 bits)
      community.crypto.openssl_privatekey:
        path: "{{playbook_dir}}/etc/certs/server.rsa"
        size: 2048

    - name: Generate an OpenSSL Certificate Signing Request with Subject information
      community.crypto.openssl_csr:
        path: "{{playbook_dir}}/server.csr"
        privatekey_path: "{{playbook_dir}}/etc/certs/server.rsa"
        country_name: "RU"
        organization_name: "Homeworking nginx"
        email_address: "id@bevolved.net"
        common_name: "Homeworking"
        subject_alt_name: 'DNS:*.ec2-15-188-103-177.eu-west-3.compute.amazonaws.com,DNS:ec2-15-188-103-177.eu-west-3.compute.amazonaws.com'
    
    - name: Generate a Self Signed OpenSSL certificate
      community.crypto.x509_certificate:
        path: "{{playbook_dir}}/etc/certs/server.crt"
        privatekey_path: "{{playbook_dir}}/etc/certs/server.rsa"
        csr_path: "{{playbook_dir}}/server.csr"
        provider: selfsigned
    
    # - name: Create key pair for the server
    #   openssl_privatekey:
    #     path: "{{playbook_dir}}/etc/certs/server.rsa"
    #     size: 2048

    # - name: Create certificate signing request
    #   openssl_csr:
    #     common_name: "Homeworking"
    #     country_name: "RU"
    #     email_address: "id@bevolved.net"
    #     locality_name: "Yalta"
    #     organization_name: "Homeworking nginx"
    #     path: "{{playbook_dir}}/server.csr"
    #     subject_alt_name: 
    #        - "DNS:*.ec2-15-188-103-177.eu-west-3.compute.amazonaws.com"
    #        - "DNS:ec2-15-188-103-177.eu-west-3.compute.amazonaws.com"
    #     privatekey_path: "{{playbook_dir}}/etc/certs/server.rsa"

    # - name: Create self-signed certificate
    #   openssl_certificate:
    #     csr_path: "{{playbook_dir}}/server.csr"
    #     path: "{{playbook_dir}}/etc/certs/server.crt"
    #     provider: selfsigned
    #     privatekey_path: "{{playbook_dir}}/etc/certs/server.rsa"

- name: configure webserver without tls
  hosts: nodes
  gather_facts: true
  become: true
  vars:
    nginx_port_no_tls: 80
    nginx_port_tls: 443
  tasks:
    - name: create nginx repo definition
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: install nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: copy certs files
      copy:
        src: etc/certs
        dest: /etc/nginx
        owner: root
        group: root
        mode: 0644

    - name: copy main nginx config file
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/notls.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx ssl config file
      template:
        src: templates/nginx_ssl.conf.j2
        dest: /etc/nginx/conf.d/ssl.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy index.html
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: ensure nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

    - name: install firewalld
      yum:
        name: firewalld
        update_cache: true
        state: present

    - name: ensure firewalld is enabled and started
      service:
        name: firewalld
        state: started
        enabled: true

    - name: install python-firewall
      yum:
        name: python-firewall
        update_cache: true
        state: present

    - name: insert firewalld rule for nginx
      firewalld:
        port: "{{ nginx_port_no_tls }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

    - name: insert firewalld rule for nginx
      firewalld:
        port: "{{nginx_port_tls}}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

  post_tasks:
    - name: check web site from control server
      uri:
        url: "http://{{ ansible_host }}:{{ nginx_port_no_tls }}"
        return_content: true
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200
  
    - name: check web site from control server tls
      uri:
        url: "https://{{ ansible_host }}:{{nginx_port_tls}}"
        return_content: true
        validate_certs: no
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
