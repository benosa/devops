---
- name: Set up the CA
  hosts: localhost
  become: no
  vars:
    secret_ca_passphrase: secret_ca_passphrase
  tasks:
    - name: Make sure that etc/certs exists 
      file: 
        state: directory
        path: "{{playbook_dir}}/etc/ca"

    - name: Create private key with password protection
      community.crypto.openssl_privatekey:
        path: "{{playbook_dir}}/etc/ca/ca-certificate.key"
        passphrase: "{{ secret_ca_passphrase }}"
        cipher: auto

    - name: Create certificate signing request (CSR) for CA certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{playbook_dir}}/etc/ca/ca-certificate.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        common_name: Homework CA
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: yes
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: "{{playbook_dir}}/etc/ca/ca-certificate.pem"
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "{{playbook_dir}}/etc/ca/ca-certificate.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        provider: selfsigned

- name: Create keys and certificates
  hosts: localhost
  become: no
  vars:
    python_version: 3.6
    cert_host: ec2-15-188-103-177.eu-west-3.compute.amazonaws.com
    secret_ca_passphrase: secret_ca_passphrase
  tasks:
    - name: Make sure that etc/certs exists 
      file: 
        state: directory
        path: "{{playbook_dir}}/etc/certs"

    - name: Generate an OpenSSL private key with a different size (2048 bits)
      community.crypto.openssl_privatekey:
        path: "{{playbook_dir}}/etc/certs/server.rsa"
        size: 2048
      #delegate_to: server_1
      run_once: true

    - name: Generate an OpenSSL Certificate Signing Request with Subject information
      community.crypto.openssl_csr_pipe:
        #path: "{{playbook_dir}}/server.csr"
        privatekey_path: "{{playbook_dir}}/etc/certs/server.rsa"
        country_name: "RU"
        organization_name: "Homeworking nginx"
        email_address: "id@bevolved.net"
        common_name: "Homeworking"
        subject_alt_name: 'DNS:*.{{cert_host}},DNS:{{cert_host}}'
      #delegate_to: server_1
      run_once: true
      register: csr

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        csr_content: "{{ csr.csr }}"
        provider: ownca
        ownca_path: "{{playbook_dir}}/etc/ca/ca-certificate.pem"
        ownca_privatekey_path: "{{playbook_dir}}/etc/ca/ca-certificate.key"
        ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      #delegate_to: server_2
      run_once: true
      register: certificate

    - name: Write certificate file on server_1
      copy:
        dest: "{{playbook_dir}}/etc/certs/server.pem"
        content: "{{ certificate.certificate }}"
      #delegate_to: server_1
      run_once: true
    
- name: configure webserver without tls
  hosts: nodes
  gather_facts: true
  become: true
  vars:
    nginx_port_no_tls: 80
    nginx_port_tls: 443
  tasks:
    - name: create nginx repo definition
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: install nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: copy certs files
      copy:
        src: etc/certs
        dest: /etc/nginx
        owner: root
        group: root
        mode: 0644

    - name: copy main nginx config file
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/notls.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx ssl config file
      template:
        src: templates/nginx_ssl.conf.j2
        dest: /etc/nginx/conf.d/ssl.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy index.html
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: ensure nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

    - name: install firewalld
      yum:
        name: firewalld
        update_cache: true
        state: present

    - name: ensure firewalld is enabled and started
      service:
        name: firewalld
        state: started
        enabled: true

    - name: install python-firewall
      yum:
        name: python-firewall
        update_cache: true
        state: present

    - name: insert firewalld rule for nginx
      firewalld:
        port: "{{ nginx_port_no_tls }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

    - name: insert firewalld rule for nginx
      firewalld:
        port: "{{nginx_port_tls}}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

  post_tasks:
    - name: check web site from control server
      uri:
        url: "http://{{ ansible_host }}:{{ nginx_port_no_tls }}"
        return_content: true
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200
  
    - name: check web site from control server tls
      uri:
        url: "https://{{ ansible_host }}:{{nginx_port_tls}}"
        return_content: true
        validate_certs: no
      connection: local
      register: example_webpage_out
      failed_when: example_webpage_out.status != 200

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
